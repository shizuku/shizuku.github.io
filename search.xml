<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零开始C++深度学习</title>
      <link href="/posts/16470.html"/>
      <url>/posts/16470.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章原是我上学期的线代课的作业，后来添了一点东西又成了微积分作业，再后来又添了亿点东西又成了计导作业。现在再修修补补又是一篇博客(*￣ ▽ ￣*)ブ。</p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>本文我们将只使用 STL 来实现一个最简单的手写数字识别（被誉为深度学习的 Hello world），之所以用简单的例子是因为难的我不会(～￣ ▽ ￣)～，或者也可以说是因为简单的例子比较能够看到问题的本质。</p><p>那么进入正题，我们首先列出一个框架，然后逢山开路，遇水造桥。我们知道深度学习涉及大量矩阵运算，因此我们首先需要实现一个矩阵类以表示矩阵及其运算。我们知道 python 中的线性代数库 numpy 的矩阵运算底层就是用 c 实现。一种实现是使用模板的，另一种是不使用模板的。两种实现各有利弊，如果使用模板将更符合数学的直觉——矩阵应该是不能随意改变形状的，并且许多行数和列数的匹配问题（比如矩阵乘法的行列匹配关系）可以在编译时发现；而不用模板的话可以更轻松地实现 reshape 的操作，并且可以更方便隐藏源代码。numpy 显然没有使用模板，而我当初写的时候没有考虑这么多，所以写成模板了(´。＿。｀)，然后就一直凑合用着。</p><p>然后，我们需要读取数据，我们知道深度学习是基于大数据的，没有数据就什么都没有。本文例子所用的数据来自于：<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">http://yann.lecun.com/exdb/mnist/</a></p><p>如果做别的项目，互联网上其实也都有许多数据集可用使用，这就有待于聪明的你去发现了 o(*￣ ▽ ￣*)ブ。</p><p>有了数据集我们还需要读取，然后做一些处理，因此我们需要实现一个 Reader 类来读取数据。</p><p>之后，我们需要构建一个神经网络然后实现预测、训练等功能。</p><p>然后就是 main 用来调度。</p><p>那么本文以下的内容大概以此为主线展开：</p><ul><li>实现 la::matrix</li><li>实现 Reader</li><li>实现 Framework</li><li>实现 main</li></ul><p>我实现的矩阵类放在名称空间 la（linear algebra）中，此外还包含全局的操作符重载和应用于矩阵的函数，而其它几个类并没有塞进名称空间里面，可能稍微有点违和。</p><h2 id="实现-la-matrix"><a href="#实现-la-matrix" class="headerlink" title="实现 la::matrix"></a>实现 la::matrix</h2><p>我们知道 python 中的线性代数库 numpy 的矩阵运算底层就是用 C 实现。对于 C++的实现，我们有两种思路，一种实现是使用模板的，另一种是不使用模板的。两种实现各有利弊，如果使用模板将更符合数学的直觉——矩阵应该是不能随意改变形状的，并且许多行数和列数的匹配问题（比如矩阵乘法的行列匹配关系）可以在编译时发现；而不用模板的话可以更轻松地实现 reshape 的操作，并且可以更方便隐藏源代码。我所采用的是模板类的方式。</p><p>为了方便管理，我们使用一维数组存储数据并提供 at 方法访问。为了应对不同的需求，诸如是否下标检查，是否 const 访问，提供四种 at 方法。为了防止堆栈空间不足而溢出，我们将其动态分配在堆上。<br>此外还可以提供迭代器以供快速迭代。<br>实现基本四则运算以及矩阵乘法，实现基本操作如转置，大多以操作符重载的形式实现。<br>此外还有一些杂乱的功能，例如适用于矩阵的函数，本例用到的其他矩阵操作等。</p><p>以下为部分的代码。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">namespace</span> la <span class="token punctuation">{</span><span class="token keyword">template</span><span class="token operator">&lt;</span>size_t _M<span class="token punctuation">,</span> size_t _N<span class="token punctuation">,</span> <span class="token keyword">typename</span> _Ty <span class="token operator">=</span> <span class="token keyword">double</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">matrix</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token function">matrix</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>_Ty<span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token function">matrix</span><span class="token punctuation">(</span><span class="token keyword">const</span> matrix<span class="token operator">&lt;</span>_M<span class="token punctuation">,</span> _N<span class="token punctuation">,</span> _Ty<span class="token operator">></span><span class="token operator">&amp;</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token function">matrix</span><span class="token punctuation">(</span><span class="token keyword">const</span> matrix<span class="token operator">&lt;</span>_M<span class="token punctuation">,</span> _N<span class="token punctuation">,</span> _Ty<span class="token operator">></span><span class="token operator">&amp;&amp;</span> src<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> head<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">const_iterator</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">iterator</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>_Ty<span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    _Ty<span class="token operator">&amp;</span> <span class="token function">at</span><span class="token punctuation">(</span>size_t m<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    _Ty<span class="token operator">&amp;</span> <span class="token function">fat</span><span class="token punctuation">(</span>size_t m<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> _Ty<span class="token operator">&amp;</span> <span class="token function">cat</span><span class="token punctuation">(</span>size_t m<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> _Ty<span class="token operator">&amp;</span> <span class="token function">fcat</span><span class="token punctuation">(</span>size_t m<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    _Ty <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    size_t <span class="token function">max_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    _Ty <span class="token function">maximum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">const</span> matrix<span class="token operator">&lt;</span>_N<span class="token punctuation">,</span> _M<span class="token punctuation">,</span> _Ty<span class="token operator">></span> <span class="token function">transposition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    matrix<span class="token operator">&lt;</span>_M<span class="token punctuation">,</span> _N<span class="token punctuation">,</span> _Ty<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> matrix<span class="token operator">&lt;</span>_M<span class="token punctuation">,</span> _N<span class="token punctuation">,</span> _Ty<span class="token operator">></span><span class="token operator">&amp;</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> matrix<span class="token operator">&lt;</span>_M<span class="token punctuation">,</span> _N<span class="token punctuation">,</span> _Ty<span class="token operator">></span> <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> matrix<span class="token operator">&lt;</span>_M<span class="token punctuation">,</span> _N<span class="token punctuation">,</span> _Ty<span class="token operator">></span> <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> matrix<span class="token operator">&lt;</span>_N<span class="token punctuation">,</span> _M<span class="token punctuation">,</span> _Ty<span class="token operator">></span> <span class="token keyword">operator</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    matrix<span class="token operator">&lt;</span>_M<span class="token punctuation">,</span> _N<span class="token punctuation">,</span> _Ty<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> matrix<span class="token operator">&lt;</span>_M<span class="token punctuation">,</span> _N<span class="token punctuation">,</span> _Ty<span class="token operator">></span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    matrix<span class="token operator">::</span>iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    matrix<span class="token operator">::</span>iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span><span class="token operator">:</span>    _Ty<span class="token operator">*</span> head<span class="token punctuation">;</span>    _Ty<span class="token operator">*</span> tail<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span>size_t _A<span class="token punctuation">,</span> size_t _B<span class="token punctuation">,</span> <span class="token keyword">typename</span> _Ty<span class="token operator">></span>la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>_A<span class="token punctuation">,</span> _B<span class="token punctuation">,</span> _Ty<span class="token operator">></span> <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>_A<span class="token punctuation">,</span> _B<span class="token punctuation">,</span> _Ty<span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>_A<span class="token punctuation">,</span> _B<span class="token punctuation">,</span> _Ty<span class="token operator">></span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">template</span><span class="token operator">&lt;</span>size_t _A<span class="token punctuation">,</span> size_t _B<span class="token punctuation">,</span> size_t _C<span class="token punctuation">,</span> <span class="token keyword">typename</span> _Ty<span class="token operator">></span>la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>_A<span class="token punctuation">,</span> _C<span class="token punctuation">,</span> _Ty<span class="token operator">></span> <span class="token keyword">operator</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token keyword">const</span> la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>_A<span class="token punctuation">,</span> _B<span class="token punctuation">,</span> _Ty<span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>_B<span class="token punctuation">,</span> _C<span class="token punctuation">,</span> _Ty<span class="token operator">></span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span>size_t _A<span class="token punctuation">,</span> size_t _B<span class="token punctuation">,</span> <span class="token keyword">typename</span> _Ty<span class="token operator">></span>std<span class="token operator">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>ostream<span class="token operator">&amp;</span> ostr<span class="token punctuation">,</span> <span class="token keyword">const</span> la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>_A<span class="token punctuation">,</span> _B<span class="token punctuation">,</span> _Ty<span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span>size_t _A<span class="token punctuation">,</span> size_t _B<span class="token punctuation">,</span> size_t _C<span class="token punctuation">,</span> size_t _D<span class="token punctuation">,</span> <span class="token keyword">typename</span> _Ty<span class="token operator">></span><span class="token keyword">const</span> la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>_A<span class="token punctuation">,</span> _B<span class="token punctuation">,</span> _Ty<span class="token operator">></span> <span class="token function">reshape</span><span class="token punctuation">(</span><span class="token keyword">const</span> la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>_C<span class="token punctuation">,</span> _D<span class="token punctuation">,</span> _Ty<span class="token operator">></span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现-Reader"><a href="#实现-Reader" class="headerlink" title="实现 Reader"></a>实现 Reader</h2><p>根据(mnist)页面的描述，我们编写一个类来读取此数据集。</p><p>根据描述，(img)数据的开头为四个 32 位(int)，我们将其读取并忽略。而(lab)数据开头为两个 32 位(int)，同样读取并忽略。如构造函数所示。</p><p>img 数据为四位表示一个像素点，我们需要连续读取四个位并将其反转，读取这样的 784 个数字并且将其存储在矩阵中，然后返回。lab 数据只需要读取一个数字并返回即可。</p><p>在(get_img)和(get_lab)函数中用(read)方法读取，(img)数据需要反转，所以添加(private)方法(reverse_32)。</p><p>简略代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span>size_t _M<span class="token punctuation">,</span> size_t _N<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Reader</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Reader</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string img<span class="token punctuation">,</span> std<span class="token operator">::</span>string lab<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>_M<span class="token punctuation">,</span> _N<span class="token operator">></span> <span class="token function">get_img</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token function">get_lab</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">reverse_32</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>    std<span class="token operator">::</span>ifstream img<span class="token punctuation">;</span>    std<span class="token operator">::</span>ifstream lab<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现-Framework"><a href="#实现-Framework" class="headerlink" title="实现 Framework"></a>实现 Framework</h2><p>接下来进行神经网络的实现，我们的神经网络非常简单，只有一个隐藏层，隐藏层也只有十个神经元。对此我们编写一个类实现。类包含 b0、(b1)、(w1)三个矩阵。此外还实现了预测(predict)和训练(train)的功能。</p><p>在构造函数中我们随机初始化(w1)矩阵，随机区间为([-\sqrt{\frac{6}{28 \times 28 + 10}},\sqrt{\frac{6}{28 \times 28 + 10}}])，(b0)、(b1)则全部为 0。</p><p>预测只需要根据式(5)进行即可。</p><pre class="line-numbers language-cpp"><code class="language-cpp">la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">></span> NeuralNetwork<span class="token operator">::</span><span class="token function">predict</span><span class="token punctuation">(</span><span class="token keyword">const</span> la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token operator">></span><span class="token operator">&amp;</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">(</span>in <span class="token operator">+</span> b0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> w1<span class="token punctuation">)</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>训练需要以 train_batch 为单位进行，我们以 100 个数据为一组对神经网络进行调整，总共 600 组。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> NeuralNetwork<span class="token operator">::</span><span class="token function">train</span><span class="token punctuation">(</span>Reader<span class="token operator">&lt;</span>size1<span class="token punctuation">,</span> size1<span class="token operator">></span><span class="token operator">&amp;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size1 <span class="token operator">*</span> size1<span class="token operator">></span> b0tmp<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size2<span class="token operator">></span> b1tmp<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>size1 <span class="token operator">*</span> size1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">></span> w1tmp<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lab<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size1 <span class="token operator">*</span> size1<span class="token operator">></span> in<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size1 <span class="token operator">*</span> size1<span class="token operator">></span> l0_in<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size1 <span class="token operator">*</span> size1<span class="token operator">></span> l0_out<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size2<span class="token operator">></span> l1_in<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size2<span class="token operator">></span> l1_out<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>size2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span> act1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>size2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span> grad_b1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>size1 <span class="token operator">*</span> size1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">></span> grad_w1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size1 <span class="token operator">*</span> size1<span class="token operator">></span> grad_b0<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">600</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lab <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">get_lab</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in <span class="token operator">=</span> la<span class="token operator">::</span>reshape<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size1 <span class="token operator">*</span> size1<span class="token operator">></span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get_img</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            l0_in <span class="token operator">=</span> in <span class="token operator">+</span> b0<span class="token punctuation">;</span>            l0_out <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span>l0_in<span class="token punctuation">)</span><span class="token punctuation">;</span>            l1_in <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l0_out <span class="token operator">%</span> w1<span class="token punctuation">)</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span>            l1_out <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span>l1_in<span class="token punctuation">)</span><span class="token punctuation">;</span>            act1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">df2</span><span class="token punctuation">(</span>l1_in<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token operator">~</span><span class="token punctuation">(</span>la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size2<span class="token operator">></span><span class="token punctuation">(</span><span class="token function">identity</span><span class="token punctuation">(</span>lab<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> l1_out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            grad_b1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> act1<span class="token punctuation">;</span>            grad_w1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> la<span class="token operator">::</span><span class="token function">outer</span><span class="token punctuation">(</span>l0_out<span class="token punctuation">,</span> <span class="token operator">~</span>act1<span class="token punctuation">)</span><span class="token punctuation">;</span>            grad_b0 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">df1</span><span class="token punctuation">(</span>l0_in<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">~</span><span class="token punctuation">(</span>w1 <span class="token operator">%</span> act1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b1tmp <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">~</span>grad_b1<span class="token punctuation">;</span>            w1tmp <span class="token operator">+</span><span class="token operator">=</span> grad_w1<span class="token punctuation">;</span>            b0tmp <span class="token operator">+</span><span class="token operator">=</span> grad_b0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        b0 <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>b0tmp <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> learn_rate<span class="token punctuation">;</span>        w1 <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>w1tmp <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> learn_rate<span class="token punctuation">;</span>        b1 <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>b1tmp <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> learn_rate<span class="token punctuation">;</span>        b0tmp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w1tmp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b1tmp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为类的声明：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> size_t size1 <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span><span class="token keyword">const</span> size_t size2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">NeuralNetwork</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">NeuralNetwork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">></span> <span class="token function">predict</span><span class="token punctuation">(</span><span class="token keyword">const</span> la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token operator">></span><span class="token operator">&amp;</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">train</span><span class="token punctuation">(</span>Reader<span class="token operator">&lt;</span>size1<span class="token punctuation">,</span> size1<span class="token operator">></span><span class="token operator">&amp;</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">train</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> img<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> lab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> learn_rate<span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size1 <span class="token operator">*</span> size1<span class="token operator">></span> b0<span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> size2<span class="token operator">></span> b1<span class="token punctuation">;</span>    la<span class="token operator">::</span>matrix<span class="token operator">&lt;</span>size1 <span class="token operator">*</span> size1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">></span> w1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现-main"><a href="#实现-main" class="headerlink" title="实现 main"></a>实现 main</h2><p>main 模块主要包含 main 函数调度和正确率计算功能。</p><p>我们在 main 函数中实例化神经网络，并进行训练，分别输出训练前和训练后的证确率。代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NeuralNetwork dm <span class="token operator">=</span> <span class="token function">NeuralNetwork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">test</span><span class="token punctuation">(</span>dm<span class="token punctuation">,</span> test_img_filename<span class="token punctuation">,</span> test_lab_filename<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dm<span class="token punctuation">.</span><span class="token function">train</span><span class="token punctuation">(</span>train_img_filename<span class="token punctuation">,</span> train_lab_filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">test</span><span class="token punctuation">(</span>dm<span class="token punctuation">,</span> test_img_filename<span class="token punctuation">,</span> test_lab_filename<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确率计算并不困难，我们只需要对比期望的结果和实际的结果，并计数即可，代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">test</span><span class="token punctuation">(</span>NeuralNetwork<span class="token operator">&amp;</span> dm<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> img<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> lab<span class="token punctuation">)</span><span class="token punctuation">{</span>    Reader<span class="token operator">&lt;</span>size1<span class="token punctuation">,</span> size1<span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span>test_img_filename<span class="token punctuation">,</span> test_lab_filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">num1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">num2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> test_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> img_i <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">get_img</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lab_i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span><span class="token function">get_lab</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> rimg <span class="token operator">=</span> dm<span class="token punctuation">.</span><span class="token function">predict</span><span class="token punctuation">(</span>la<span class="token operator">::</span>reshape<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token operator">></span><span class="token punctuation">(</span>img_i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>rimg<span class="token punctuation">.</span><span class="token function">max_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> lab_i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token operator">++</span><span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            b<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        num2<span class="token punctuation">[</span>lab_i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">double</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如图为实验的结果，虽然由于神经网络的结构过于简单，致使训练后的正确率并不高，但这样的结果也符合我们的预期。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
